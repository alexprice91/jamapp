{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/Tracklist/Tracklist.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","Tracklist","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playListTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playListName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","playlistName","playlistTracks","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71c99f08.chunk.js","sourcesContent":["const clientId = '779c944f7fa44b6e995c382433ddb3d9';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\n\nconst Spotify = {\n   getAccessToken() {\n       if (accessToken) {\n           return accessToken;\n       }\n\n   \n\n   // check for access token match\n   const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n   const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n   if(accessTokenMatch && expiresInMatch) {\n       accessToken = accessTokenMatch[1];\n       const expiresIn = Number(expiresInMatch[1]);\n       // This clears the parameters, allowing us to grab a new access token when it expires.\n       window.setTimeout(() => accessToken = '', expiresIn * 1000);\n       window.history.pushState('Access Token', null, '/');\n       return accessToken;\n   } else {\n       const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n       window.location = accessUrl;\n     }\n   },\n\n\nsearch(term) {\n   const accessToken = Spotify.getAccessToken();\n   return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, { \n         headers: {\n           Authorization: `Bearer ${accessToken}`\n        }\n     }).then(response => {\n         return response.json();\n     }).then(jsonResponse => {\n         if (!jsonResponse.tracks) {\n             return [];\n         }\n         return jsonResponse.tracks.items.map(track => ({\n             id: track.id,\n             name: track.name,\n             artist: track.artists[0].name,\n             album: track.album.name,\n             uri: track.uri\n         }));\n     });\n},\n\nsavePlayList(name, trackUris) {\n    if (!name || !trackUris.length) {\n        return;\n       }\n\n       const accessToken = Spotify.getAccessToken();\n       const headers = { Authorization: `Bearer ${accessToken}`};\n       let userId;\n\n       return fetch('https://api.spotify.com/v1/me', { headers: headers }\n       ).then(response => response.json()\n       ).then(jsonResponse => {\n           userId = jsonResponse.id;\n           return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \n           {\n              headers: headers,\n              method: 'POST',\n              body: JSON.stringify({name: name})\n           }).then(response => response.json()\n           ).then(jsonResponse => {\n               const playlistId = jsonResponse.id;\n               return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                   headers: headers,\n                   method: 'POST',\n                   body: JSON.stringify({ uris: trackUris})\n               })\n           })\n       })\n    }\n}\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        term: ''\n      }\n\n      this.search = this.search.bind(this);\n      this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n\n    search() {\n      this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\n      this.setState({term: event.target.value});\n    }\n\n\n\n\n    render(){\n      return (\n     <div className=\"SearchBar\">\n        <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n      )\n    }\n  }\n\n  export default SearchBar;","import React from 'react';\nimport './Track.css';\n\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props)\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n    \n\n    renderAction() {\n          if (this.props.isRemoval) {\n             return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n          } else {\n             return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n          }\n      }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n\n    }\n\n    removeTrack() {\n      this.props.onRemove(this.props.track);\n    }\n\n\n\n    render(){\n      return (\n        <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n      )\n    }\n  }\n\n  export default Track","import React from 'react';\nimport './Tracklist.css';\nimport Track from '../Track/Track'\n\n\nclass Tracklist extends React.Component {\n    render(){\n      return (\n        <div className=\"TrackList\">\n            {\n                this.props.tracks.map(track => {\n                    return <Track track={track} \n                                  key={track.id} \n                                  onAdd={this.props.onAdd} \n                                  onRemove={this.props.onRemove} \n                                  isRemoval={this.props.isRemoval}\n                                  />\n                })\n            }\n        </div>\n\n\n      )\n    }\n  }\n\n  export default Tracklist","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../Tracklist/Tracklist'\n\n\nclass SearchResults extends React.Component {\n    render(){\n      return (\n        <div className=\"SearchResults\">\n        <h2>Results</h2>\n         <TrackList tracks={this.props.searchResults}\n                    onAdd={this.props.onAdd}\n                    isRemoval={false}\n         />\n      </div>\n      )\n    }\n  }\n\n  export default SearchResults;","import React from 'react';\nimport './Playlist.css';\n\nimport Tracklist from '../Tracklist/Tracklist';\n\n\nclass Playlist extends React.Component {\n\n    constructor(props) {\n      super(props);\n\n      this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(event) {\n      this.props.onNameChange(event.target.value);\n    }\n\n    render(){\n      return (\n        <div className=\"Playlist\">\n        <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\n        <Tracklist tracks={this.props.playListTracks}\n                   onRemove={this.props.onRemove}\n                   isRemoval={true}\n        /> \n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n      </div>\n      )\n    }\n  }\n\n  export default Playlist","import React from 'react';\nimport './App.css';\n\nimport SearchBar from  '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n\n    this.state = {\n      searchResults: [],\n      playListName: 'My Playlist',\n      playListTracks: []\n    }\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playListTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({playListTracks: tracks})\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playListTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({ playListTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playListName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playListTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playListName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    })\n  }\n\n\n\n\n\n\n  render(){\n    return (\n    <div>\n    <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n    <div className=\"App\">\n      <SearchBar onSearch={this.search} />\n      <div className=\"App-playlist\">\n       \n        <SearchResults searchResults={this.state.searchResults} \n                       onAdd={this.addTrack}\n        />\n        <Playlist playListName={this.state.playListName}\n                  playListTracks={this.state.playListTracks}\n                  onRemove={this.removeTrack}\n                  onNameChange={this.updatePlaylistName}\n                  onSave={this.savePlaylist}\n        />\n      </div>\n    </div>\n  </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}